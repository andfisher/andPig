<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2019-12-15 at 11:30:37.
 */
class PlayerTest extends \PHPUnit\Framework\TestCase
{

    /**
     * @var Player
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->diceStub = $this->createMock(Die6::class);

        $this->object = new Player(1, $this->diceStub);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void
    {

    }

    /**
     * @covers Player::getId
     * @todo   Implement testGetId().
     */
    public function testGetId()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Player::setActive
     * @todo   Implement testSetActive().
     */
    public function testSetActive()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Player::getScore
     * @todo   Implement testGetScore().
     */
    public function testGetScore()
    {
        $this->diceStub->method('roll')
             ->willReturn([6, 6]);

        $this->object->takeTurn();

        $this->assertEquals($this->object->getScore(), 12);
    }

    /**
     * @covers Player::takeTurn
     * @todo   Implement testTakeTurn().
     */
    public function testTakeTurn()
    {
        $this->diceStub->method('roll')
             ->willReturn([4, 5]);

        $this->object->takeTurn();

        $this->assertEquals($this->object->getScore(), 9);

        $this->object->takeTurn();

        $this->assertEquals($this->object->getScore(), 18);

        $this->object->takeTurn();

        $this->assertEquals($this->object->getScore(), 27);
        $this->object->takeTurn();

        $this->assertEquals($this->object->getScore(), 36);

    }


    /**
     * @covers Player::takeTurn
     * @todo   Implement testTakeTurn().
     */
    public function testTakeTurnWithSingleOne()
    {
        $this->diceStub->method('roll')
             ->willReturn([1,6]);

        $this->expectException(Player\TurnEndException::class);

        $this->object->takeTurn();
    }

    /**
     * @covers Player::takeTurn
     * @todo   Implement testTakeTurn().
     */
    public function testTakeTurnWithSnakeeyes()
    {
        $this->diceStub->method('roll')
             ->willReturn([1,1]);

        $this->expectException(Player\TurnEndException::class);

        $this->object->takeTurn();
    }

    /**
     * @covers Player::getDice
     * @todo   Implement testGetDice().
     */
    public function testGetDice()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Player::reset
     * @todo   Implement testReset().
     */
    public function testReset()
    {
        $this->diceStub->method('roll')
             ->willReturn([2,3]);

        $this->object->takeTurn(); #5
        $this->object->takeTurn(); #10
        $this->object->takeTurn(); #15
        $this->object->takeTurn(); #20

        $this->assertEquals($this->object->getScore(), 20);

        $this->object->reset();

        $this->assertEquals($this->object->getScore(), 0);
    }

}
